name: Azure Pipelines
variables:
  python.version: '3.7.6'
stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: Ubuntu-18.04
    steps:
    - task: TerraformInstaller@0
      displayName: Use Terraform 1.1.2
      inputs:
        terraformVersion: 1.1.2
    - task: TerraformCLI@0
      displayName: 'check terraform version'
      inputs:
        command: version

    - task: DownloadSecureFile@1
      name: sshkey
      displayName: 'Download SSH Public Key'
      inputs:
        secureFile: 'id_rsa.pub'
    - task: Bash@3
      displayName: "Copy SSH key"
      inputs:
        targetType: 'inline'
        script: |
          mkdir -p ~/.ssh
          cp $(sshkey.secureFilePath) ~/.ssh    # Needed for Terraform VM deployment
    #- task: InstallSSHKey@0
    #  inputs:
    #    knownHostsEntry: 'KNOWN_HOSTS_STRING'
    #    sshPublicKey: 'PUBLIC_KEY'
    #    sshKeySecureFile: 'id_rsa'
    #Terraform init, plan, validate, apply commands
    - task: TerraformCLI@0
      displayName: 'Initialize Terraform'
      inputs:
        command: init
        workingDirectory: terraform/environments/test
        backendType: selfConfigured
    - task:  TerraformCLI@0
      displayName: 'Plan Terraform'
      inputs:
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceName: 'last_project'
    - task: TerraformCLI@0
      displayName: 'Apply Terraform'
      inputs:
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceName: 'last_project'

    - task: Bash@3
      displayName: Install Newman and JUnit reporter
      inputs:
        targetType: 'inline'
        script: |
          #! /bin/bash
          sudo apt-get upgrade -y
          sudo npm install -g newman -y
          sudo npm install -g newman-reporter-junitfull -y

    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: 'newman run Starter_APIs_Regression_Tests.postman_collection.json -e ProjectEnv.postman_environment.json -r cli,junitfull --reporter-junitfull-export JUnitReport-regression-test-data.xml'
        workingDirectory: 'automatedtesting/postman'

    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        script: 'newman run Starter_APIs_Data_Validation.postman_collection.json -e ProjectEnv.postman_environment.json -r cli,junitfull -x --reporter-junitfull-export JUnitReport-data-validation.xml'
        workingDirectory: 'automatedtesting/postman'

    - task: PublishTestResults@2
      displayName: 'Publish integrations test'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/JUnitReport*.xml'
        searchFolder: 'automatedtesting/postman'
        mergeTestResults: true
        testRunTitle: 'Publish postman test result'
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: 'automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

    - publish: automatedtesting/selenium/login.py
      displayName: 'Upload Selenium Test definition'
      artifact: drop-seleniumtests

- stage: Deploy
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-18.04'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'deployment_service'
              appName: 'myProjectDemo-AppService'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  - deployment: VMDeploy
    displayName: Deploy Virtual Machine 
    environment:
      name: vm_deployment
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            displayName: 'Download Selenium'
            artifact: drop-seleniumtests
          - task: Bash@3
            displayName: Install Selenium dependencies
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                sudo apt-get update
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip unzip expect -y
                sudo apt-get install -y chromium-browser
                sudo apt-get install -y chromium-chromedriver
                pip3 install selenium
          - task: Bash@3
            displayName: Run Selenium script
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                python3 $(Pipeline.Workspace)/drop-seleniumtests/login.py 
                sudo cp selenium-report.txt /var/log/selenium-report.txt

- stage: Test
  jobs:
    - job: Performance_testing
      displayName: 'Run Jmeter test suites'
      pool:
        vmImage: Ubuntu-18.04
      steps:
        - task: JMeterInstaller@0
          displayName: 'Install JMeter 5.4.2'
          inputs:
            jmeterVersion: 5.4.2
        - task: Bash@3
          displayName: 'Run JMeter Endurance tests'
          inputs:
            targetType: inline
            script: |
              jmeter -n -t automatedtesting/jmeter/Starter_Endurance.jmx -l endurance-results.jtl -e -f -o endurance-test-report
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Endurance Test Results'
          inputs:
            ArtifactName: 'endurance-test-report'
            PathtoPublish: '$(Build.SourcesDirectory)/endurance-test-report'
        - task: Bash@3
          displayName: 'Run JMeter Stress tests'
          inputs:
            targetType: inline
            script: |
              jmeter -n -t automatedtesting/jmeter/Starter_Stress.jmx -l stress-results.jtl -e -f -o stress-test-report
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Endurance Test Results'
          inputs:
            ArtifactName: 'stress-test-report'
            PathtoPublish: '$(Build.SourcesDirectory)/stress-test-report'
